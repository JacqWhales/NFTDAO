pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

contract MyNFT is ERC721 {
  uint256 public mintingRate;
  uint256 public lastMintedBlock;
  uint256 public mintsInCurrentBlock;
  uint256 public nftPrice;
  mapping(address => bool) public members;

  constructor(string memory _name, string memory _symbol) public ERC721(_name, _symbol) {
    mintingRate = 2;
    lastMintedBlock = 0;
    mintsInCurrentBlock = 0;
    nftPrice = 1;
  }

  function mint(address _to, uint256 _tokenId) public {
  _mint(_to, _tokenId);
}


function mintNFT(uint256 _tokenId) public payable {

  // check that the caller has sent a payment to the contract
  require(msg.value >= nftPrice, "Incorrect payment amount");

  if (block.number == lastMintedBlock || lastMintedBlock == 0) {
    require(mintsInCurrentBlock < mintingRate, "Too many NFTs minted in current block");
    if (mint(msg.sender, _tokenId) == false) {
      require(false, "Failed to mint NFT");
    }
    mintsInCurrentBlock++;
  } else {
    mintsInCurrentBlock = 1;
    lastMintedBlock = block.number;
    if (mint(msg.sender, _tokenId) == false) {
      require(false, "Failed to mint NFT");
    }
  }
}

  function addMember(address _member) public {
    members[_member] = true;
  }

  function updateMintingRate(uint256 _newRate) public {
    require(members[msg.sender] == true, "Caller is not a member of the DAO");

    uint256 votes = 0;
    for (uint256 i = 0; i < members.length; i++) {
      address member = members[i];
      if (msg.sender == member) {
        votes++;
      }
    }

    require(votes >= (members.length / 2), "Not enough votes in favor of the change");
    mintingRate = _newRate;
  }
}
